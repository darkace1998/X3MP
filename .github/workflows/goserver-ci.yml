name: GoServer Lint and Security

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'GoServer/**'
      - '.github/workflows/goserver-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'GoServer/**'
      - '.github/workflows/goserver-ci.yml'

jobs:
  lint-and-test:
    name: Lint, Security, and Test GoServer
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        cache-dependency-path: GoServer/go.mod

    - name: Cache Go tools
      uses: actions/cache@v4
      with:
        path: |
          ~/go/bin/golangci-lint
          ~/go/bin/gosec
          ~/go/bin/goimports
        key: ${{ runner.os }}-go-tools-${{ hashFiles('GoServer/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-go-tools-

    - name: Install dependencies
      working-directory: GoServer
      run: |
        go mod tidy
        go mod download

    - name: Install tools
      working-directory: GoServer
      timeout-minutes: 10
      run: make install-tools

    - name: Run go fmt check
      working-directory: GoServer
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          echo "Please run 'go fmt ./...' to format your code."
          exit 1
        fi

    - name: Run go vet
      working-directory: GoServer
      run: go vet ./...

    - name: Run golangci-lint
      working-directory: GoServer
      timeout-minutes: 10
      run: golangci-lint run --out-format=github-actions

    - name: Run gosec security scanner
      working-directory: GoServer
      timeout-minutes: 5
      run: |
        gosec -fmt=sarif -out=gosec-report.sarif ./...
        gosec -fmt=json -out=gosec-report.json ./...

    - name: Upload gosec SARIF report
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: GoServer/gosec-report.sarif
        category: gosec

    - name: Run tests
      working-directory: GoServer
      timeout-minutes: 10
      run: go test -v -race -coverprofile=coverage.out -timeout=5m ./...

    - name: Generate coverage report
      working-directory: GoServer
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v4
      with:
        file: ./GoServer/coverage.out
        flags: goserver
        name: goserver-coverage

    - name: Build binary
      working-directory: GoServer
      run: go build -o bin/x3mp_goserver .

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: goserver-reports
        path: |
          GoServer/gosec-report.json
          GoServer/coverage.html
          GoServer/bin/
        retention-days: 7